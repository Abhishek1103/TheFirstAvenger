/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tictactoe;

import java.net.InetAddress;
import javax.swing.JOptionPane;

/**
 *
 * @author Shreyas
 */
public class Main extends javax.swing.JFrame {
    
    GameWindow game;
    boolean isMulti=false;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        game=new GameWindow();
        try {
            InetAddress thisIP = InetAddress.getLocalHost();
            showIP.setText(thisIP.getHostAddress());
        }
        catch (Exception e) {
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        title = new javax.swing.JLabel();
        checkLAN = new javax.swing.JCheckBox();
        txtPlayer1 = new javax.swing.JTextField();
        txtPlayer2 = new javax.swing.JTextField();
        isClient = new javax.swing.JRadioButton();
        isServer = new javax.swing.JRadioButton();
        txtIP = new javax.swing.JTextField();
        showIP = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();
        txtPort = new javax.swing.JTextField();
        txtStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        title.setText("TIC TAC TOE");

        checkLAN.setText("LAN");
        checkLAN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkLANActionPerformed(evt);
            }
        });

        txtPlayer1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtPlayer1.setText("Player 1");

        txtPlayer2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtPlayer2.setText("Player 2");

        isClient.setText("Client");
        isClient.setEnabled(false);
        isClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isClientActionPerformed(evt);
            }
        });

        isServer.setText("Server");
        isServer.setEnabled(false);
        isServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isServerActionPerformed(evt);
            }
        });

        txtIP.setText("localhost");
        txtIP.setEnabled(false);

        btnStart.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        txtPort.setText("1234");
        txtPort.setEnabled(false);

        txtStatus.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(title))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(isClient)
                                    .addComponent(isServer))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtIP, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                                    .addComponent(showIP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(txtPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(checkLAN))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addGap(38, 38, 38)
                .addComponent(txtPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(checkLAN)
                        .addGap(36, 36, 36))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(isClient)
                            .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(isServer)
                            .addComponent(showIP, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>                        

    private void isClientActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        isServer.setSelected(false);
        isClient.setSelected(true);
        if (isClient.isSelected()) {
            game.isServer=false;
            txtIP.setEnabled(true);
            showIP.setVisible(false);
        }
    }                                        

    private void isServerActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        isServer.setSelected(true);
        isClient.setSelected(false);
        if (isServer.isSelected()){
            game.isServer=true;
            txtIP.setEnabled(false);
            showIP.setVisible(true);
        }
    }                                        

    private void checkLANActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        if (checkLAN.isSelected()) {
            isClient.setEnabled(true);
            isServer.setEnabled(true);
            isClient.setSelected(true);
            isServer.setSelected(false);
            txtPlayer2.setEnabled(false);
            txtIP.setEnabled(true);
            showIP.setVisible(false);
            txtPort.setEnabled(true);
            isMulti=true;
        }
        else {
            isClient.setEnabled(false);
            isServer.setEnabled(false);
            isClient.setSelected(false);
            isServer.setSelected(false);
            txtPlayer2.setEnabled(true);
            txtIP.setEnabled(false);
            showIP.setVisible(false);
            txtPort.setEnabled(false);
            isMulti=false;
        }
    }                                        

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        game.lan=new LAN();
        if (isMulti) {
            try {
                game.lan.isServer=game.isServer;
                game.isMulti=true;
                if (game.lan.isServer) {
                    game.player[0]=txtPlayer1.getText();
                    int port=Integer.valueOf(txtPort.getText());
                    game.lan.startServer(port);
                }
                else {
                    game.player[1]=txtPlayer1.getText();
                    String ip=txtIP.getText();
                    int port=Integer.valueOf(txtPort.getText());
                    game.lan.startClient(ip, port);
                }
                Thread startGame = new Thread(new Runnable(){
                    @Override
                    public void run() {
                        while (!game.lan.isReady) {
                            txtStatus.setText("Connecting . . . ");
                        }
                        if (game.lan.isServer) {
                            game.lan.sendData(txtPlayer1.getText());
                            game.player[1]=game.lan.getData();
                        }
                        else {
                            game.player[0]=game.lan.getData();
                            game.lan.sendData(txtPlayer1.getText());
                        }
                        gameStart();
                    }
                });
                startGame.start();
            }
            catch (Exception e) {
                JOptionPane.showMessageDialog(null,"Connection Failed\nTry Again !");
            }
        }
        else {
            game.player[0]=txtPlayer1.getText();
            game.player[1]=txtPlayer2.getText();
            gameStart();
        }
        
    }                                        

    public void gameStart() {
        txtStatus.setText("");
        game.setLocation(this.getX(),this.getY());
        this.setVisible(false);
        game.setVisible(true);
        game.begin();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnStart;
    private javax.swing.JCheckBox checkLAN;
    private javax.swing.JRadioButton isClient;
    private javax.swing.JRadioButton isServer;
    private javax.swing.JLabel showIP;
    private javax.swing.JLabel title;
    private javax.swing.JTextField txtIP;
    private javax.swing.JTextField txtPlayer1;
    private javax.swing.JTextField txtPlayer2;
    private javax.swing.JTextField txtPort;
    private javax.swing.JLabel txtStatus;
    // End of variables declaration                   
}
